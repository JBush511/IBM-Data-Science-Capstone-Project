!pip install sqlalchemy==1.3.9
​
Collecting sqlalchemy==1.3.9
  Downloading SQLAlchemy-1.3.9.tar.gz (6.0 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 6.0/6.0 MB 38.9 MB/s eta 0:00:0000:0100:01
  Preparing metadata (setup.py) ... done
Building wheels for collected packages: sqlalchemy
  Building wheel for sqlalchemy (setup.py) ... done
  Created wheel for sqlalchemy: filename=SQLAlchemy-1.3.9-cp37-cp37m-linux_x86_64.whl size=1159121 sha256=1be5bb235456f52e40acf4d5736ce3a7fda5e58631adcc0e594f1671954bc662
  Stored in directory: /home/jupyterlab/.cache/pip/wheels/ef/95/ac/c232f83b415900c26553c64266e1a2b2863bc63e7a5d606c7e
Successfully built sqlalchemy
Installing collected packages: sqlalchemy
  Attempting uninstall: sqlalchemy
    Found existing installation: SQLAlchemy 1.3.24
    Uninstalling SQLAlchemy-1.3.24:
      Successfully uninstalled SQLAlchemy-1.3.24
Successfully installed sqlalchemy-1.3.9
Connect to the database
Let us first load the SQL extension and establish a connection with the database

%load_ext sql
import csv, sqlite3
con = sqlite3.connect("my_data1.db")
cur = con.cursor()
!pip install -q pandas==1.1.5
%sql sqlite:///my_data1.db
'Connected: @my_data1.db'
import pandas as pd
df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_2/data/Spacex.csv")
df.to_sql("SPACEXT2", con, if_exists='replace', index=False,method="multi")
/home/jupyterlab/conda/envs/python/lib/python3.7/site-packages/pandas/core/generic.py:2882: UserWarning: The spaces in these column names will not be changed. In pandas versions < 0.14, spaces were converted to underscores.
  both result in 0.1234 being formatted as 0.12.
%sql select * from spacext2;
----------------------------------------------------------------------------------------------


#Task 1
#Display the names of the unique launch sites in the space mission
%sql select DISTINCT(LAUNCH_SITE) FROM SPACEXT2;
 * sqlite:///my_data1.db
Done.
Launch_Site
CCAFS LC-40
VAFB SLC-4E
KSC LC-39A
CCAFS SLC-40

#Task 2
#Display 5 records where launch sites begin with the string 'CCA'
%sql SELECT distinct(LAUNCH_SITE) FROM SPACEXT2 WHERE LAUNCH_SITE LIKE 'CCA%' limit 5;
 * sqlite:///my_data1.db
Done.
Launch_Site
CCAFS LC-40
CCAFS SLC-40

#Task 3
#Display the total payload mass carried by boosters launched by NASA (CRS)
%sql SELECT SUM(PAYLOAD_MASS__KG_) AS "TOTAL_PAYLOAD_MASS_FOR_NASA_CRS" FROM SPACEXT2 WHERE CUSTOMER LIKE '%NASA (CRS)%' ;
 * sqlite:///my_data1.db
Done.
TOTAL_PAYLOAD_MASS_FOR_NASA_CRS
48213

#Task 4
#Display average payload mass carried by booster version F9 v1.1
%sql SELECT ROUND(AVG(PAYLOAD_MASS__KG_), 2) AS "AVG_PAYLOAD_MASS_FOR_BOOSTER_VERSION_F9V1.1" FROM SPACEXT2 WHERE Booster_Version LIKE '%F9 v1.1%' ;
 * sqlite:///my_data1.db
Done.
AVG_PAYLOAD_MASS_FOR_BOOSTER_VERSION_F9V1.1
2534.67

#Task 5
#List the date when the first succesful landing outcome in ground pad was acheived.
%sql SELECT MIN(DATE)as first_successful_landing FROM SPACEXT2 WHERE "Landing _Outcome" LIKE 'Success%'  ;
 * sqlite:///my_data1.db
Done.
first_successful_landing
01-05-2017

#Task 6
##List the names of the boosters which have success in drone ship and have payload mass greater than 4000 but less than 6000
%sql select BOOSTER_VERSION FROM SPACEXT2 WHERE ("LANDING _OUTCOME" LIKE 'Success (drone ship)') & (payload_mass__kg_ between 4000 and 6000) ;
 * sqlite:///my_data1.db
Done.
Booster_Version
F9 FT B1022
F9 FT B1026
F9 FT B1021.2
F9 FT B1031.2

#Task 7
#List the total number of successful and failure mission outcomes
%sql select count(Mission_Outcome) as Total_Missions, [Mission_Outcome] as Outcome from spacext2 Group by (select distinct(Mission_Outcome) where Mission_Outcome like 'Failure%');
 * sqlite:///my_data1.db
Done.
Total_Missions	Outcome
100	Success
1	Failure (in flight)

#Task 8
#List the names of the booster_versions which have carried the maximum payload mass. Use a subquery
%sql select booster_version as Booster_Name, payload_mass__kg_ as Max_payload from spacext2 where payload_mass__kg_ == (select max(payload_mass__kg_) from spacext2) order by booster_version asc; 
 * sqlite:///my_data1.db
Done.
Booster_Name	Max_payload
F9 B5 B1048.4	15600
F9 B5 B1048.5	15600
F9 B5 B1049.4	15600
F9 B5 B1049.5	15600
F9 B5 B1049.7	15600
F9 B5 B1051.3	15600
F9 B5 B1051.4	15600
F9 B5 B1051.6	15600
F9 B5 B1056.4	15600
F9 B5 B1058.3	15600
F9 B5 B1060.2	15600
F9 B5 B1060.3	15600

#Task 9
#List the records which will display the month names, failure landing_outcomes in drone ship ,booster versions, launch_site for the months in year 2015.
#Note: SQLLite does not support monthnames. So you need to use substr(Date, 4, 2) as month to get the months and substr(Date,7,4)='2015' for year.
%sql select substr(Date,4,2) as month, substr(Date,7,4) as 'Year',[booster_version],[launch_site], "LANDING _OUTCOME" from spacext2 where ("LANDING _OUTCOME" like 'Failure (drone ship)%') & (substr(Date,7,4)='2015');
 * sqlite:///my_data1.db
Done.
month	Year	Booster_Version	Launch_Site	Landing _Outcome
01	2015	F9 v1.1 B1012	CCAFS LC-40	Failure (drone ship)
04	2015	F9 v1.1 B1015	CCAFS LC-40	Failure (drone ship)
#Task 10
#Rank the count of successful landing_outcomes between the date 04-06-2010 and 20-03-2017 in descending order.
%sql select count("LANDING _OUTCOME") AS Landing_Count, ("LANDING _OUTCOME") from spacext2 where ((substr(Date,7) between '2010' and '2017') & ("LANDING _OUTCOME" like 'Success%')) group by "LANDING _OUTCOME";

 * sqlite:///my_data1.db
Done.
Landing_Count	Landing _Outcome
12	Success (drone ship)
8	Success (ground pad)
